using System;
using System.IO;

internal class Program
{
    private static void Main(string[] args)
    {
        Console.CursorVisible = false;

        bool isPlaying = true;

        ConsoleKeyInfo pressedKey;

        char[,] map = ReadMap("map1.txt");

        int playerPositionX = 1;
        int playerPositionY = 1;
        int score= 0;

        while (isPlaying)
        {
            Console.Clear();

            DrawMap(map);

            Console.SetCursorPosition(playerPositionX, playerPositionY);
            Console.Write("@");

            Console.SetCursorPosition(0, 43);
            Console.Write($"Очки: {score}.");

            pressedKey = Console.ReadKey();

            MovementProcessing(pressedKey, ref playerPositionX, ref playerPositionY, map, ref score);
        }  
    }

    private static char[,] ReadMap(string text)
    {
        string[] file = File.ReadAllLines("map1.txt");
        char[,] map = new char[GetMaxLenghtOfLine(file), file.Length];

        for (int x = 0; x < map.GetLength(0); x++)
        {
            for (int y = 0; y < map.GetLength(1); y++)
            {
                map[x, y] = file[y][x];
            }
        }

        return map;
    }

    private static void DrawMap(char[,] map)
    {
        for (int y = 0; y < map.GetLength(1); y++)
        {
            for (int x = 0; x < map.GetLength(0); x++)
            {
                Console.Write(map[x, y]);
            }

            Console.WriteLine();
        }
    }

    private static void MovementProcessing(ConsoleKeyInfo pressedKey, ref int playerPositionX, ref int playerPositionY, char[,] map, ref int score)
    {
        int[] direction = GetDirection(pressedKey);

        char emptyCell = ' ';
        char scoreCell = '.';

        int nextPlayerPositionX = playerPositionX + direction[0];
        int nextPlayerPositionY = playerPositionY + direction[1];

        char nextCell = map[nextPlayerPositionX, nextPlayerPositionY];

        if (nextCell == emptyCell || nextCell == scoreCell)
        {
            playerPositionX = nextPlayerPositionX;
            playerPositionY = nextPlayerPositionY;

            if(nextCell == scoreCell)
            {
                score++;
                map[nextPlayerPositionX, nextPlayerPositionY] = emptyCell;
            }
        }
    }

    private static int[] GetDirection(ConsoleKeyInfo pressedKey)
    {
        int directionX = 0;
        int directionY = 0;
        int[] direction = { directionX, directionY };

        if (pressedKey.Key == ConsoleKey.UpArrow)
            direction[1] -= 1;
        else if (pressedKey.Key == ConsoleKey.DownArrow)
            direction[1] += 1;
        else if (pressedKey.Key == ConsoleKey.LeftArrow)
            direction[0] -= 1;
        else if (pressedKey.Key == ConsoleKey.RightArrow)
            direction[0] += 1;

        return direction;
    }

    private static int GetMaxLenghtOfLine(string[] lines)
    {
        int maxLenght = lines[0].Length;

        foreach (var line in lines)
        {
            if (line.Length > maxLenght)
            {
                maxLenght = line.Length;
            }
        }

        return maxLenght;
    }
}


